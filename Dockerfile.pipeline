FROM python:3.11-slim

# Install system dependencies
RUN apt-get update && apt-get install -y \
    wget \
    curl \
    gnupg \
    unzip \
    xvfb \
    gpg \
    && rm -rf /var/lib/apt/lists/*

# Install Chrome/Chromium based on architecture
RUN ARCH=$(dpkg --print-architecture) && \
    if [ "$ARCH" = "amd64" ]; then \
        echo "Installing Google Chrome for AMD64..."; \
        wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | gpg --dearmor -o /usr/share/keyrings/googlechrome-linux-keyring.gpg && \
        echo "deb [arch=amd64 signed-by=/usr/share/keyrings/googlechrome-linux-keyring.gpg] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google.list && \
        apt-get update && \
        apt-get install -y google-chrome-stable && \
        rm -rf /var/lib/apt/lists/*; \
    elif [ "$ARCH" = "arm64" ]; then \
        echo "Installing Chromium for ARM64..."; \
        apt-get update && \
        apt-get install -y chromium-browser && \
        rm -rf /var/lib/apt/lists/* && \
        ln -sf /usr/bin/chromium-browser /usr/bin/google-chrome; \
    else \
        echo "Unsupported architecture: $ARCH"; \
        exit 1; \
    fi

# ChromeDriver will be managed by webdriver-manager at runtime
# This avoids version compatibility issues

# Set working directory
WORKDIR /app

# Copy requirements and install Python dependencies
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Copy application code
COPY *.py .
COPY core/ core/
COPY sql/ sql/
COPY extractors/ extractors/

# Create non-root user for security
RUN groupadd -r appuser && useradd -r -g appuser appuser
RUN chown -R appuser:appuser /app
USER appuser

# Set environment variables for headless Chrome
ENV DISPLAY=:99
ENV CHROME_BIN=/usr/bin/google-chrome

# Default command
CMD ["python", "run_pipeline.py"]
