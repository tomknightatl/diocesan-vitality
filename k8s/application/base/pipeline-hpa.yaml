apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: pipeline-hpa
  namespace: diocesan-vitality
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: pipeline-deployment
  minReplicas: 1
  maxReplicas: 5 # Scale up to 5 pods based on workload
  metrics:
    # Scale based on CPU usage
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 70 # Restored to normal threshold
    # Scale based on memory usage
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: 80
  # Custom metric: scale based on available work
  # This requires a custom metrics adapter (like prometheus-adapter)
  # - type: Object
  #   object:
  #     metric:
  #       name: available_dioceses_count
  #     target:
  #       type: Value
  #       value: "10"
  #     describedObject:
  #       apiVersion: v1
  #       kind: Service
  #       name: backend-service
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300 # Wait 5 minutes before scaling down
      policies:
        - type: Pods
          value: 1 # Scale down by exactly 1 pod at a time
          periodSeconds: 60
      selectPolicy: Min # Use the single pod policy (no percentage scaling)
    scaleUp:
      stabilizationWindowSeconds: 60 # Wait 1 minute before scaling up
      policies:
        - type: Pods
          value: 1 # Scale up by exactly 1 pod at a time
          periodSeconds: 60
      selectPolicy: Max # Use the single pod policy (no percentage scaling)
---
# Pod Disruption Budget to ensure availability during scaling
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: pipeline-pdb
  namespace: diocesan-vitality
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: pipeline
