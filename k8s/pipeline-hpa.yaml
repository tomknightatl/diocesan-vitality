apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: pipeline-hpa
  namespace: diocesan-vitality
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: pipeline-deployment
  minReplicas: 1
  maxReplicas: 1  # Limit to 1 replica due to single fast-pool node capacity
  metrics:
  # Scale based on CPU usage
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  # Scale based on memory usage
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  # Custom metric: scale based on available work
  # This requires a custom metrics adapter (like prometheus-adapter)
  # - type: Object
  #   object:
  #     metric:
  #       name: available_dioceses_count
  #     target:
  #       type: Value
  #       value: "10"
  #     describedObject:
  #       apiVersion: v1
  #       kind: Service
  #       name: backend-service
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300  # Wait 5 minutes before scaling down
      policies:
      - type: Percent
        value: 50    # Scale down by max 50% at a time
        periodSeconds: 60
      - type: Pods
        value: 1     # Or scale down by max 1 pod at a time
        periodSeconds: 60
      selectPolicy: Min  # Use the more conservative policy
    scaleUp:
      stabilizationWindowSeconds: 60   # Wait 1 minute before scaling up
      policies:
      - type: Percent
        value: 100   # Scale up by max 100% at a time (double)
        periodSeconds: 60
      - type: Pods
        value: 2     # Or scale up by max 2 pods at a time
        periodSeconds: 60
      selectPolicy: Max  # Use the more aggressive policy for scaling up
---
# Pod Disruption Budget to ensure availability during scaling
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: pipeline-pdb
  namespace: diocesan-vitality
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: pipeline