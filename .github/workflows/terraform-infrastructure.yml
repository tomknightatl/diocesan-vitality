name: Terraform Infrastructure

on:
  push:
    branches: [main, develop]
    paths:
      - 'terraform/**'
  pull_request:
    branches: [main, develop]
    paths:
      - 'terraform/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
      action:
        description: 'Terraform action'
        required: true
        default: 'plan'
        type: choice
        options:
          - plan
          - apply
          - destroy

env:
  TF_VERSION: "1.6.0"
  DIGITALOCEAN_TOKEN: ${{ secrets.DIGITALOCEAN_TOKEN }}
  CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}

jobs:
  terraform-validate:
    name: Validate Terraform
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Format Check
        run: terraform fmt -check -recursive terraform/

      - name: Validate Development Environment
        working-directory: terraform/environments/dev
        run: |
          terraform init -backend=false
          terraform validate

      - name: Validate Staging Environment
        working-directory: terraform/environments/staging
        run: |
          terraform init -backend=false
          terraform validate

      - name: Validate Modules
        run: |
          for module in terraform/modules/*/; do
            echo "Validating module: $module"
            cd "$module"
            terraform init -backend=false
            terraform validate
            cd - > /dev/null
          done

  terraform-plan-dev:
    name: Plan Development
    runs-on: ubuntu-latest
    needs: terraform-validate
    if: github.ref == 'refs/heads/develop' || github.event_name == 'pull_request'
    environment: development
    outputs:
      plan-exists: ${{ steps.plan.outputs.plan-exists }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Create terraform.tfvars
        working-directory: terraform/environments/dev
        run: |
          cat > terraform.tfvars << EOF
          kubernetes_version = "${{ vars.KUBERNETES_VERSION || '1.28.2-do.0' }}"
          cloudflare_account_id = "${{ secrets.CLOUDFLARE_ACCOUNT_ID }}"
          cloudflare_zone_id = "${{ secrets.CLOUDFLARE_ZONE_ID }}"
          EOF

      - name: Terraform Init
        working-directory: terraform/environments/dev
        run: terraform init

      - name: Terraform Plan
        id: plan
        working-directory: terraform/environments/dev
        run: |
          terraform plan -detailed-exitcode -out=tfplan || export TF_EXIT=$?
          if [ ${TF_EXIT} -eq 1 ]; then
            echo "Terraform plan failed"
            exit 1
          elif [ ${TF_EXIT} -eq 2 ]; then
            echo "plan-exists=true" >> $GITHUB_OUTPUT
            echo "Changes detected in plan"
          else
            echo "plan-exists=false" >> $GITHUB_OUTPUT
            echo "No changes detected"
          fi

      - name: Upload Plan
        if: steps.plan.outputs.plan-exists == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: dev-tfplan
          path: terraform/environments/dev/tfplan
          retention-days: 5

      - name: Comment PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const planExists = '${{ steps.plan.outputs.plan-exists }}' === 'true';
            const comment = planExists
              ? 'ğŸ”„ **Terraform Plan (Development)**: Changes detected in infrastructure. Review the plan before merging.'
              : 'âœ… **Terraform Plan (Development)**: No infrastructure changes detected.';

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  terraform-plan-staging:
    name: Plan Staging
    runs-on: ubuntu-latest
    needs: terraform-validate
    if: github.ref == 'refs/heads/main'
    environment: staging
    outputs:
      plan-exists: ${{ steps.plan.outputs.plan-exists }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Create terraform.tfvars
        working-directory: terraform/environments/staging
        run: |
          cat > terraform.tfvars << EOF
          kubernetes_version = "${{ vars.KUBERNETES_VERSION || '1.28.2-do.0' }}"
          cloudflare_account_id = "${{ secrets.CLOUDFLARE_ACCOUNT_ID }}"
          cloudflare_zone_id = "${{ secrets.CLOUDFLARE_ZONE_ID }}"
          EOF

      - name: Terraform Init
        working-directory: terraform/environments/staging
        run: terraform init

      - name: Terraform Plan
        id: plan
        working-directory: terraform/environments/staging
        run: |
          terraform plan -detailed-exitcode -out=tfplan || export TF_EXIT=$?
          if [ ${TF_EXIT} -eq 1 ]; then
            echo "Terraform plan failed"
            exit 1
          elif [ ${TF_EXIT} -eq 2 ]; then
            echo "plan-exists=true" >> $GITHUB_OUTPUT
            echo "Changes detected in plan"
          else
            echo "plan-exists=false" >> $GITHUB_OUTPUT
            echo "No changes detected"
          fi

      - name: Upload Plan
        if: steps.plan.outputs.plan-exists == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: staging-tfplan
          path: terraform/environments/staging/tfplan
          retention-days: 5

  terraform-apply-dev:
    name: Apply Development
    runs-on: ubuntu-latest
    needs: terraform-plan-dev
    if: |
      github.ref == 'refs/heads/develop' &&
      needs.terraform-plan-dev.outputs.plan-exists == 'true' &&
      (github.event_name == 'workflow_dispatch' &&
       github.event.inputs.environment == 'dev' &&
       github.event.inputs.action == 'apply')
    environment: development
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Create terraform.tfvars
        working-directory: terraform/environments/dev
        run: |
          cat > terraform.tfvars << EOF
          kubernetes_version = "${{ vars.KUBERNETES_VERSION || '1.28.2-do.0' }}"
          cloudflare_account_id = "${{ secrets.CLOUDFLARE_ACCOUNT_ID }}"
          cloudflare_zone_id = "${{ secrets.CLOUDFLARE_ZONE_ID }}"
          EOF

      - name: Terraform Init
        working-directory: terraform/environments/dev
        run: terraform init

      - name: Download Plan
        uses: actions/download-artifact@v4
        with:
          name: dev-tfplan
          path: terraform/environments/dev/

      - name: Terraform Apply
        working-directory: terraform/environments/dev
        run: terraform apply -auto-approve tfplan

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3

      - name: Apply Kubernetes Resources
        working-directory: terraform/environments/dev
        run: |
          # Set kubeconfig
          export KUBECONFIG=$(terraform output -raw kubeconfig_path)

          # Create namespaces
          kubectl create namespace cloudflare-tunnel --dry-run=client -o yaml | kubectl apply -f -
          kubectl create namespace argocd --dry-run=client -o yaml | kubectl apply -f -

          # Apply tunnel secrets
          SECRET_FILE=$(terraform output -raw cloudflare_tunnel.k8s_secret_file 2>/dev/null || echo "k8s-secrets/cloudflare-tunnel-dev.yaml")
          if [ -f "$SECRET_FILE" ]; then
            kubectl apply -f "$SECRET_FILE"
          fi

  terraform-apply-staging:
    name: Apply Staging
    runs-on: ubuntu-latest
    needs: terraform-plan-staging
    if: |
      github.ref == 'refs/heads/main' &&
      needs.terraform-plan-staging.outputs.plan-exists == 'true' &&
      (github.event_name == 'workflow_dispatch' &&
       github.event.inputs.environment == 'staging' &&
       github.event.inputs.action == 'apply')
    environment: staging
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Create terraform.tfvars
        working-directory: terraform/environments/staging
        run: |
          cat > terraform.tfvars << EOF
          kubernetes_version = "${{ vars.KUBERNETES_VERSION || '1.28.2-do.0' }}"
          cloudflare_account_id = "${{ secrets.CLOUDFLARE_ACCOUNT_ID }}"
          cloudflare_zone_id = "${{ secrets.CLOUDFLARE_ZONE_ID }}"
          EOF

      - name: Terraform Init
        working-directory: terraform/environments/staging
        run: terraform init

      - name: Download Plan
        uses: actions/download-artifact@v4
        with:
          name: staging-tfplan
          path: terraform/environments/staging/

      - name: Terraform Apply
        working-directory: terraform/environments/staging
        run: terraform apply -auto-approve tfplan

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3

      - name: Apply Kubernetes Resources
        working-directory: terraform/environments/staging
        run: |
          # Set kubeconfig
          export KUBECONFIG=$(terraform output -raw kubeconfig_path)

          # Create namespaces
          kubectl create namespace cloudflare-tunnel --dry-run=client -o yaml | kubectl apply -f -
          kubectl create namespace argocd --dry-run=client -o yaml | kubectl apply -f -

          # Apply tunnel secrets
          SECRET_FILE=$(terraform output -raw cloudflare_tunnel.k8s_secret_file 2>/dev/null || echo "k8s-secrets/cloudflare-tunnel-staging.yaml")
          if [ -f "$SECRET_FILE" ]; then
            kubectl apply -f "$SECRET_FILE"
          fi

  terraform-destroy:
    name: Destroy Infrastructure
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'workflow_dispatch' &&
      github.event.inputs.action == 'destroy'
    environment: ${{ github.event.inputs.environment }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Create terraform.tfvars
        working-directory: terraform/environments/${{ github.event.inputs.environment }}
        run: |
          cat > terraform.tfvars << EOF
          kubernetes_version = "${{ vars.KUBERNETES_VERSION || '1.28.2-do.0' }}"
          cloudflare_account_id = "${{ secrets.CLOUDFLARE_ACCOUNT_ID }}"
          cloudflare_zone_id = "${{ secrets.CLOUDFLARE_ZONE_ID }}"
          EOF

      - name: Terraform Init
        working-directory: terraform/environments/${{ github.event.inputs.environment }}
        run: terraform init

      - name: Terraform Destroy
        working-directory: terraform/environments/${{ github.event.inputs.environment }}
        run: terraform destroy -auto-approve
