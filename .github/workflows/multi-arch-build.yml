name: Multi-Architecture Build and Deploy (DISABLED)

on:
  # DISABLED: This workflow conflicts with multi-cluster-ci-cd.yml
  # push:
  #   branches: [main, develop, staging]
  workflow_dispatch:
    inputs:
      environment:
        description: "Target environment"
        required: true
        default: "dev"
        type: choice
        options:
          - dev
          - staging
          - production

env:
  REGISTRY: docker.io
  IMAGE_NAMESPACE: tomatl/diocesan-vitality

jobs:
  build-multi-arch:
    name: Build Multi-Architecture Images
    runs-on: ubuntu-latest
    outputs:
      backend-tag: ${{ steps.meta.outputs.backend-tag }}
      frontend-tag: ${{ steps.meta.outputs.frontend-tag }}
      pipeline-tag: ${{ steps.meta.outputs.pipeline-tag }}
      environment: ${{ steps.meta.outputs.environment }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU for multi-arch builds
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Generate image tags
        id: meta
        run: |
          TIMESTAMP=$(date +%Y-%m-%d-%H-%M-%S)
          BRANCH=$(echo ${GITHUB_REF#refs/heads/} | sed 's/[^a-zA-Z0-9]/-/g')

          case "$BRANCH" in
            "develop") ENV="dev" ;;
            "staging") ENV="staging" ;;
            "main") ENV="prod" ;;
            *) ENV="${{ inputs.environment || 'dev' }}" ;;
          esac

          echo "environment=$ENV" >> $GITHUB_OUTPUT
          echo "backend-tag=${{ env.IMAGE_NAMESPACE }}:${ENV}-backend-${TIMESTAMP}" >> $GITHUB_OUTPUT
          echo "frontend-tag=${{ env.IMAGE_NAMESPACE }}:${ENV}-frontend-${TIMESTAMP}" >> $GITHUB_OUTPUT
          echo "pipeline-tag=${{ env.IMAGE_NAMESPACE }}:${ENV}-pipeline-${TIMESTAMP}" >> $GITHUB_OUTPUT

          echo "üè∑Ô∏è Generated tags for environment: $ENV"
          echo "   Backend: ${{ env.IMAGE_NAMESPACE }}:${ENV}-backend-${TIMESTAMP}"
          echo "   Frontend: ${{ env.IMAGE_NAMESPACE }}:${ENV}-frontend-${TIMESTAMP}"
          echo "   Pipeline: ${{ env.IMAGE_NAMESPACE }}:${ENV}-pipeline-${TIMESTAMP}"

      - name: Build and push Backend (multi-arch)
        uses: docker/build-push-action@v5
        with:
          context: backend
          file: backend/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.backend-tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDTIME=${{ github.run_number }}

      - name: Build and push Frontend (multi-arch)
        uses: docker/build-push-action@v5
        with:
          context: frontend
          file: frontend/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.frontend-tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDTIME=${{ github.run_number }}

      - name: Build and push Pipeline (multi-arch)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile.pipeline
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.pipeline-tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDTIME=${{ github.run_number }}

      - name: Verify multi-architecture images
        run: |
          echo "üîç Verifying multi-architecture images..."

          # Check if images support both architectures
          docker buildx imagetools inspect ${{ steps.meta.outputs.backend-tag }}
          docker buildx imagetools inspect ${{ steps.meta.outputs.frontend-tag }}
          docker buildx imagetools inspect ${{ steps.meta.outputs.pipeline-tag }}

      - name: Build Summary
        run: |
          echo "üê≥ Multi-architecture images built successfully!"
          echo "================================="
          echo "Environment: ${{ steps.meta.outputs.environment }}"
          echo "Architectures: linux/amd64, linux/arm64"
          echo ""
          echo "üì¶ Images:"
          echo "   Backend: ${{ steps.meta.outputs.backend-tag }}"
          echo "   Frontend: ${{ steps.meta.outputs.frontend-tag }}"
          echo "   Pipeline: ${{ steps.meta.outputs.pipeline-tag }}"
          echo ""
          echo "‚úÖ Ready for deployment to DOKS cluster (x86_64/amd64)"
          echo "‚úÖ Compatible with local ARM64 development (Apple Silicon)"

  update-manifests:
    name: Update Kubernetes Manifests
    runs-on: ubuntu-latest
    needs: [build-multi-arch]
    if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/staging' || github.ref == 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Update development manifests
        if: github.ref == 'refs/heads/develop'
        run: |
          echo "üìù Updating development environment manifests..."

          # Update development patches with new image tags
          sed -i "s|image: tomatl/diocesan-vitality:.*backend.*|image: ${{ needs.build-multi-arch.outputs.backend-tag }}|g" k8s/environments/development/development-patches.yaml
          sed -i "s|image: tomatl/diocesan-vitality:.*frontend.*|image: ${{ needs.build-multi-arch.outputs.frontend-tag }}|g" k8s/environments/development/development-patches.yaml
          sed -i "s|image: tomatl/diocesan-vitality:.*pipeline.*|image: ${{ needs.build-multi-arch.outputs.pipeline-tag }}|g" k8s/environments/development/development-patches.yaml

          echo "‚úÖ Development manifests updated"

      - name: Update staging manifests
        if: github.ref == 'refs/heads/staging'
        run: |
          echo "üìù Updating staging environment manifests..."

          # Update staging patches with new image tags
          if [ -f k8s/environments/staging/staging-patches.yaml ]; then
            sed -i "s|image: tomatl/diocesan-vitality:.*backend.*|image: ${{ needs.build-multi-arch.outputs.backend-tag }}|g" k8s/environments/staging/staging-patches.yaml
            sed -i "s|image: tomatl/diocesan-vitality:.*frontend.*|image: ${{ needs.build-multi-arch.outputs.frontend-tag }}|g" k8s/environments/staging/staging-patches.yaml
            sed -i "s|image: tomatl/diocesan-vitality:.*pipeline.*|image: ${{ needs.build-multi-arch.outputs.pipeline-tag }}|g" k8s/environments/staging/staging-patches.yaml
          fi

          echo "‚úÖ Staging manifests updated"

      - name: Commit and push changes
        if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/staging'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          if git diff --quiet; then
            echo "‚ÑπÔ∏è No manifest changes to commit"
          else
            git add k8s/environments/
            git commit -m "üöÄ Multi-arch deployment: ${{ needs.build-multi-arch.outputs.environment }} (run #${{ github.run_number }})"
            git push
            echo "‚úÖ Manifest changes committed and pushed"
          fi
