name: Build and Push Docker Images

on:
  push:
    branches: [ main ]
    paths:
      - 'backend/**'
      - 'frontend/**'
      - 'Dockerfile.pipeline'
      - '.github/workflows/docker-build-push.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'backend/**'
      - 'frontend/**'
      - 'Dockerfile.pipeline'
      - '.github/workflows/docker-build-push.yml'
  workflow_dispatch:
    inputs:
      force_build:
        description: 'Force build all images'
        required: false
        default: 'false'
        type: boolean

env:
  REGISTRY: docker.io
  IMAGE_NAMESPACE: tomatl/diocesan-vitality

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      backend: ${{ steps.changes.outputs.backend }}
      frontend: ${{ steps.changes.outputs.frontend }}
      pipeline: ${{ steps.changes.outputs.pipeline }}
      force: ${{ github.event.inputs.force_build == 'true' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Detect changes
        id: changes
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ "${{ github.event.inputs.force_build }}" = "true" ]; then
            echo "backend=true" >> $GITHUB_OUTPUT
            echo "frontend=true" >> $GITHUB_OUTPUT
            echo "pipeline=true" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "backend=true" >> $GITHUB_OUTPUT
            echo "frontend=true" >> $GITHUB_OUTPUT
            echo "pipeline=true" >> $GITHUB_OUTPUT
          else
            # Check for changes in specific directories
            if git diff --name-only HEAD~1 HEAD | grep -E '^backend/'; then
              echo "backend=true" >> $GITHUB_OUTPUT
            fi
            if git diff --name-only HEAD~1 HEAD | grep -E '^frontend/'; then
              echo "frontend=true" >> $GITHUB_OUTPUT
            fi
            if git diff --name-only HEAD~1 HEAD | grep -E '^(Dockerfile\.pipeline|core/|extractors/|requirements\.txt)'; then
              echo "pipeline=true" >> $GITHUB_OUTPUT
            fi
          fi

  build-backend:
    needs: detect-changes
    if: needs.detect-changes.outputs.backend == 'true' || needs.detect-changes.outputs.force == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Generate metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAMESPACE }}
          tags: |
            type=ref,event=branch,suffix=-backend-{{date 'YYYY-MM-DD-HH-mm-ss'}}
            type=ref,event=pr,suffix=-backend-pr-{{date 'YYYY-MM-DD-HH-mm-ss'}}
            type=raw,value=backend-latest,enable={{is_default_branch}}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build-frontend:
    needs: detect-changes
    if: needs.detect-changes.outputs.frontend == 'true' || needs.detect-changes.outputs.force == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Generate metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAMESPACE }}
          tags: |
            type=ref,event=branch,suffix=-frontend-{{date 'YYYY-MM-DD-HH-mm-ss'}}
            type=ref,event=pr,suffix=-frontend-pr-{{date 'YYYY-MM-DD-HH-mm-ss'}}
            type=raw,value=frontend-latest,enable={{is_default_branch}}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build-pipeline:
    needs: detect-changes
    if: needs.detect-changes.outputs.pipeline == 'true' || needs.detect-changes.outputs.force == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Generate metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAMESPACE }}
          tags: |
            type=ref,event=branch,suffix=-pipeline-{{date 'YYYY-MM-DD-HH-mm-ss'}}
            type=ref,event=pr,suffix=-pipeline-pr-{{date 'YYYY-MM-DD-HH-mm-ss'}}
            type=raw,value=pipeline-latest,enable={{is_default_branch}}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.pipeline
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  update-manifests:
    needs: [detect-changes, build-backend, build-frontend, build-pipeline]
    if: always() && github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate timestamp
        id: timestamp
        run: echo "timestamp=$(date +%Y-%m-%d-%H-%M-%S)" >> $GITHUB_OUTPUT

      - name: Update Kubernetes manifests
        run: |
          TIMESTAMP="${{ steps.timestamp.outputs.timestamp }}"

          # Update backend deployment if backend was built
          if [ "${{ needs.detect-changes.outputs.backend }}" = "true" ] || [ "${{ needs.detect-changes.outputs.force }}" = "true" ]; then
            sed -i "s|image: tomatl/diocesan-vitality:backend-.*|image: tomatl/diocesan-vitality:main-backend-$TIMESTAMP|g" k8s/backend-deployment.yaml
            echo "Updated backend image to: main-backend-$TIMESTAMP"
          fi

          # Update frontend deployment if frontend was built
          if [ "${{ needs.detect-changes.outputs.frontend }}" = "true" ] || [ "${{ needs.detect-changes.outputs.force }}" = "true" ]; then
            sed -i "s|image: tomatl/diocesan-vitality:frontend-.*|image: tomatl/diocesan-vitality:main-frontend-$TIMESTAMP|g" k8s/frontend-deployment.yaml
            echo "Updated frontend image to: main-frontend-$TIMESTAMP"
          fi

          # Update pipeline deployment if pipeline was built
          if [ "${{ needs.detect-changes.outputs.pipeline }}" = "true" ] || [ "${{ needs.detect-changes.outputs.force }}" = "true" ]; then
            sed -i "s|image: tomatl/diocesan-vitality:pipeline-.*|image: tomatl/diocesan-vitality:main-pipeline-$TIMESTAMP|g" k8s/pipeline-deployment.yaml
            echo "Updated pipeline image to: main-pipeline-$TIMESTAMP"
          fi

      - name: Commit and push manifest updates
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          if git diff --quiet; then
            echo "No changes to commit"
          else
            TIMESTAMP="${{ steps.timestamp.outputs.timestamp }}"

            git add k8s/*-deployment.yaml
            git commit -m "üöÄ Auto-update Kubernetes manifests ($TIMESTAMP)

            üê≥ Updated Docker images:
            $(if [ "${{ needs.detect-changes.outputs.backend }}" = "true" ] || [ "${{ needs.detect-changes.outputs.force }}" = "true" ]; then echo "- backend: tomatl/diocesan-vitality:main-backend-$TIMESTAMP"; fi)
            $(if [ "${{ needs.detect-changes.outputs.frontend }}" = "true" ] || [ "${{ needs.detect-changes.outputs.force }}" = "true" ]; then echo "- frontend: tomatl/diocesan-vitality:main-frontend-$TIMESTAMP"; fi)
            $(if [ "${{ needs.detect-changes.outputs.pipeline }}" = "true" ] || [ "${{ needs.detect-changes.outputs.force }}" = "true" ]; then echo "- pipeline: tomatl/diocesan-vitality:main-pipeline-$TIMESTAMP"; fi)

            üìù Auto-generated by GitHub Actions
            üîó Commit: ${{ github.sha }}"

            git push
            echo "‚úÖ Kubernetes manifests updated and pushed"
          fi
