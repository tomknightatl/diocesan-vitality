name: CI Pipeline

on:
  push:
    branches:
      - main
      - develop
      - 'feature/**'
  pull_request:
    branches:
      - main
      - develop

env:
  REGISTRY: docker.io
  IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/usccb

jobs:
  # Job 1: Run Python tests
  test-python:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests
        run: |
          pytest tests/ -v

  # Job 2: Build and push Docker images
  build-and-push:
    runs-on: ubuntu-latest
    needs: test-python  # Only build if tests pass
    # Only build images on push (not on PR)
    if: github.event_name == 'push'
    
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        run: |
          # Generate tags based on branch
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "BACKEND_TAG=${{ env.IMAGE_NAME }}:backend-latest" >> $GITHUB_OUTPUT
            echo "FRONTEND_TAG=${{ env.IMAGE_NAME }}:frontend-latest" >> $GITHUB_OUTPUT
            echo "ENV_TAG=prod" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            echo "BACKEND_TAG=${{ env.IMAGE_NAME }}:backend-develop" >> $GITHUB_OUTPUT
            echo "FRONTEND_TAG=${{ env.IMAGE_NAME }}:frontend-develop" >> $GITHUB_OUTPUT
            echo "ENV_TAG=dev" >> $GITHUB_OUTPUT
          else
            # For feature branches, use the commit SHA
            echo "BACKEND_TAG=${{ env.IMAGE_NAME }}:backend-${{ github.sha }}" >> $GITHUB_OUTPUT
            echo "FRONTEND_TAG=${{ env.IMAGE_NAME }}:frontend-${{ github.sha }}" >> $GITHUB_OUTPUT
            echo "ENV_TAG=feature" >> $GITHUB_OUTPUT
          fi

      - name: Build and push backend
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: ${{ steps.meta.outputs.BACKEND_TAG }}
          cache-from: type=registry,ref=${{ env.IMAGE_NAME }}:backend-buildcache
          cache-to: type=registry,ref=${{ env.IMAGE_NAME }}:backend-buildcache,mode=max

      - name: Build and push frontend
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: ${{ steps.meta.outputs.FRONTEND_TAG }}
          cache-from: type=registry,ref=${{ env.IMAGE_NAME }}:frontend-buildcache
          cache-to: type=registry,ref=${{ env.IMAGE_NAME }}:frontend-buildcache,mode=max

      - name: Update Kubernetes manifests
        if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/main'
        run: |
          # This step updates the image tags in your k8s manifests
          # For now, we'll just output what would be updated
          echo "Would update manifests with:"
          echo "Backend: ${{ steps.meta.outputs.BACKEND_TAG }}"
          echo "Frontend: ${{ steps.meta.outputs.FRONTEND_TAG }}"
          echo "Environment: ${{ steps.meta.outputs.ENV_TAG }}"
          
          # TODO: In the future, you can automate this with:
          # - yq to update YAML files
          # - Create a PR with the changes
          # - Or directly commit if you prefer continuous deployment